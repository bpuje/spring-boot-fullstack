package com.amigoscode.service;import com.amigoscode.entity.Customer;import com.amigoscode.entity.Gender;import com.amigoscode.repository.CustomerRepository;import org.junit.jupiter.api.AfterEach;import org.junit.jupiter.api.BeforeEach;import org.junit.jupiter.api.Test;import org.mockito.Mock;import org.mockito.MockitoAnnotations;import static org.mockito.Mockito.verify;class CustomerJPADataAccessServiceTest {    private CustomerJPADataAccessService underTest;    private AutoCloseable autoCloseable;    @Mock private CustomerRepository customerRepository;    @BeforeEach    void setUp() {        autoCloseable = MockitoAnnotations.openMocks(this);        underTest = new CustomerJPADataAccessService(customerRepository);    }    @AfterEach    void tearDown() throws Exception {        autoCloseable.close();    }    @Test    void selectAllCustomers() {        // WHEN        underTest.selectAllCustomers();        // THEN        verify(customerRepository).findAll();    }    @Test    void selectCustomerById() {        // GIVEN        int id = 1;        // WHEN        underTest.selectCustomerById(id);        // THEN        verify(customerRepository).findById(id);    }    @Test    void insertCustomer() {        // GIVEN        Customer customer = new Customer(                1,"James Bond", "bond@gmail.com", 33,                Gender.MALE);        // WHEN        underTest.insertCustomer(customer);        // THEN        verify(customerRepository).save(customer);    }    @Test    void existsPersonWithEmail() {        // GIVEN        String email = "bond@gmail.com";        // WHEN        underTest.existsPersonWithEmail(email);        // THEN        verify(customerRepository).existsCustomerByEmail(email);    }    @Test    void existsPersonWithId() {        // GIVEN        Customer customer = new Customer(                "James Bond", "bond@gmail.com", 33,                Gender.MALE);        // WHEN        underTest.existsPersonWithId(customer.getId());        // THEN        verify(customerRepository).existsCustomerById(customer.getId());    }    @Test    void deleteCustomerById() {        // GIVEN        Customer customer = new Customer(                "James Bond", "bond@gmail.com", 33,                Gender.MALE);        // WHEN        underTest.deleteCustomerById(customer.getId());        // THEN        verify(customerRepository).deleteById(customer.getId());    }    @Test    void updateCustomer() {        // GIVEN        Customer customer = new Customer(                "James Bond", "bond@gmail.com", 33,                Gender.MALE);        // WHEN        underTest.updateCustomer(customer);        // THEN        verify(customerRepository).save(customer);    }}